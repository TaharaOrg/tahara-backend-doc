"use strict";(self.webpackChunktahara_backend_doc=self.webpackChunktahara_backend_doc||[]).push([[7374],{6571:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>a});const l=JSON.parse('{"id":"Overviews/Cycle","title":"Cycle Model","description":"Simplified Overview","source":"@site/docs/Overviews/Cycle.md","sourceDirName":"Overviews","slug":"/Overviews/Cycle","permalink":"/tahara-backend-doc/docs/Overviews/Cycle","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Overviews/Cycle.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Client Model","permalink":"/tahara-backend-doc/docs/Overviews/Client"},"next":{"title":"CycleDay Model","permalink":"/tahara-backend-doc/docs/Overviews/CycleDay"}}');var c=s(4848),i=s(8453);const r={},t="Cycle Model",d={},a=[{value:"Simplified Overview",id:"simplified-overview",level:2},{value:"What is its function?",id:"what-is-its-function",level:2},{value:"Fields",id:"fields",level:2},{value:"Business Logic and Special Methods (Backend)",id:"business-logic-and-special-methods-backend",level:2},{value:"Two Types of Cycles: Detailed Breakdown",id:"two-types-of-cycles-detailed-breakdown",level:3},{value:"\ud83e\ude78 <strong>Actual Cycles (<code>type = &#39;actual&#39;</code>)</strong>",id:"-actual-cycles-type--actual",level:4},{value:"\ud83d\udcc5 <strong>Expected Cycles (<code>type = &#39;expected&#39;</code>)</strong>",id:"-expected-cycles-type--expected",level:4},{value:"\ud83d\udd04 <strong>Cycle Lifecycle Management</strong>",id:"-cycle-lifecycle-management",level:4},{value:"Key Calculations Explained",id:"key-calculations-explained",level:3},{value:"Cycle Management System",id:"cycle-management-system",level:3},{value:"Cycle Day Generation",id:"cycle-day-generation",level:3},{value:"Expected Cycle Prediction",id:"expected-cycle-prediction",level:3},{value:"Data Integrity and Validation",id:"data-integrity-and-validation",level:3},{value:"Historical Analysis Features",id:"historical-analysis-features",level:3},{value:"Abnormality Detection",id:"abnormality-detection",level:3},{value:"Query Scopes",id:"query-scopes",level:3},{value:"Relationships",id:"relationships",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"cycle-model",children:"Cycle Model"})}),"\n",(0,c.jsx)(n.h2,{id:"simplified-overview",children:"Simplified Overview"}),"\n",(0,c.jsxs)(n.p,{children:["Think of the ",(0,c.jsx)(n.strong,{children:"Cycle Model"})," as the detailed record keeper for each menstrual cycle. It's like having a diary that tracks every menstrual cycle a user experiences - both the ones that actually happened and the ones the app predicts will happen."]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Individual cycle tracking"}),": Each cycle gets its own record with start/end dates and cycle details"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Two types of cycles"}),': "actual" cycles (real periods the user logged) and "expected" cycles (predicted future periods)']}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Smart calculations"}),": Automatically calculates ovulation dates, fertile windows, and cycle patterns"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Detailed daily breakdown"}),": Each cycle is connected to individual cycle days for symptom tracking"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:"Think of it as your personal menstrual cycle historian that remembers every detail and helps predict future patterns."}),"\n",(0,c.jsx)(n.h2,{id:"what-is-its-function",children:"What is its function?"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"(Backend)"})," The Cycle model serves as the core tracking entity for individual menstrual cycles, managing both historical data and future predictions to provide comprehensive cycle tracking and health insights."]}),"\n",(0,c.jsx)(n.h2,{id:"fields",children:"Fields"}),"\n",(0,c.jsxs)(n.table,{children:[(0,c.jsx)(n.thead,{children:(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.th,{children:"Field"}),(0,c.jsx)(n.th,{children:"Type"}),(0,c.jsx)(n.th,{children:"Description"})]})}),(0,c.jsxs)(n.tbody,{children:[(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.code,{children:"user_id"})}),(0,c.jsx)(n.td,{children:"Integer"}),(0,c.jsxs)(n.td,{children:["Foreign key linking cycle to its owner from ",(0,c.jsx)(n.a,{href:"/tahara-backend-doc/docs/Overviews/User",children:"User model"})]})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.code,{children:"start"})}),(0,c.jsx)(n.td,{children:"Date"}),(0,c.jsxs)(n.td,{children:[(0,c.jsx)(n.strong,{children:"Period start date"})," - When menstrual bleeding begins (user-entered for actual cycles, calculated for expected)"]})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.code,{children:"end"})}),(0,c.jsx)(n.td,{children:"Date"}),(0,c.jsxs)(n.td,{children:[(0,c.jsx)(n.strong,{children:"Predicted period end date"})," - Calculated as ",(0,c.jsx)(n.code,{children:"start + day_numbers - 1"})," from ",(0,c.jsx)(n.a,{href:"/tahara-backend-doc/docs/Overviews/Client",children:"Client model"})]})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.code,{children:"actual_end"})}),(0,c.jsx)(n.td,{children:"Date"}),(0,c.jsxs)(n.td,{children:[(0,c.jsx)(n.strong,{children:"Real period end date"}),' - When user manually ends their period (null by default, only set when user taps "My period ended")']})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.code,{children:"ovulation_date"})}),(0,c.jsx)(n.td,{children:"Date"}),(0,c.jsxs)(n.td,{children:[(0,c.jsx)(n.strong,{children:"Main ovulation day"})," - Calculated as ",(0,c.jsx)(n.code,{children:"start + (repeat_period - 14)"})," where ",(0,c.jsx)(n.code,{children:"repeat_period"})," comes from ",(0,c.jsx)(n.a,{href:"/tahara-backend-doc/docs/Overviews/Client",children:"Client model"})]})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.code,{children:"start_ovulation_date"})}),(0,c.jsx)(n.td,{children:"Date"}),(0,c.jsxs)(n.td,{children:[(0,c.jsx)(n.strong,{children:"Fertile window start"})," - Calculated as ",(0,c.jsx)(n.code,{children:"ovulation_date - 2 days"})," (5-day fertile window begins)"]})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.code,{children:"end_ovulation_date"})}),(0,c.jsx)(n.td,{children:"Date"}),(0,c.jsxs)(n.td,{children:[(0,c.jsx)(n.strong,{children:"Fertile window end"})," - Calculated as ",(0,c.jsx)(n.code,{children:"ovulation_date + 2 days"})," (5-day fertile window ends)"]})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.code,{children:"current"})}),(0,c.jsx)(n.td,{children:"String"}),(0,c.jsxs)(n.td,{children:[(0,c.jsx)(n.strong,{children:"Legacy field"}),' - Defaults to "0", appears unused in current codebase ',(0,c.jsx)(n.strong,{children:"(Backend)"})]})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.code,{children:"type"})}),(0,c.jsx)(n.td,{children:"Enum"}),(0,c.jsxs)(n.td,{children:[(0,c.jsx)(n.strong,{children:"Cycle classification"}),": ",(0,c.jsx)(n.code,{children:"actual"})," (real periods logged by user) or ",(0,c.jsx)(n.code,{children:"expected"})," (predicted future periods)"]})]}),(0,c.jsxs)(n.tr,{children:[(0,c.jsx)(n.td,{children:(0,c.jsx)(n.code,{children:"upnormal"})}),(0,c.jsx)(n.td,{children:"Text"}),(0,c.jsxs)(n.td,{children:[(0,c.jsx)(n.strong,{children:"Abnormality flags"})," - JSON array storing issues like ",(0,c.jsx)(n.code,{children:"exceeds_cycle_days"})," or ",(0,c.jsx)(n.code,{children:"exceeds_cycle_repeats"})," ",(0,c.jsx)(n.strong,{children:"(Backend)"})]})]})]})]}),"\n",(0,c.jsx)(n.h2,{id:"business-logic-and-special-methods-backend",children:"Business Logic and Special Methods (Backend)"}),"\n",(0,c.jsx)(n.h3,{id:"two-types-of-cycles-detailed-breakdown",children:"Two Types of Cycles: Detailed Breakdown"}),"\n",(0,c.jsxs)(n.h4,{id:"-actual-cycles-type--actual",children:["\ud83e\ude78 ",(0,c.jsxs)(n.strong,{children:["Actual Cycles (",(0,c.jsx)(n.code,{children:"type = 'actual'"}),")"]})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Real menstrual periods that the user has experienced and logged:"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"User-initiated"}),': Created when user taps "My period started" in the app']}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Manual end date"}),": User can manually end the cycle by setting ",(0,c.jsx)(n.code,{children:"actual_end"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Ovulation calculation"}),": All ovulation dates calculated immediately upon creation"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"CycleDay generation"}),": Creates individual day records for symptom tracking"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Validation rules"}),": Must be at least 21 days apart, cannot overlap with pregnancy"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Trigger expected cycles"}),": When an actual cycle is created, it automatically generates the next expected cycle"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Creation process:"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"// User logs period start\n$cycle = Cycle::create([\n    'start' => $request->start,           // User-selected date\n    'end' => $start + day_numbers - 1,    // Calculated from Client settings  \n    'user_id' => $user->id,\n    'type' => 'actual',                   // Real cycle\n]);\n"})}),"\n",(0,c.jsxs)(n.h4,{id:"-expected-cycles-type--expected",children:["\ud83d\udcc5 ",(0,c.jsxs)(n.strong,{children:["Expected Cycles (",(0,c.jsx)(n.code,{children:"type = 'expected'"}),")"]})]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Predicted future periods based on user's historical patterns:"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Auto-generated"}),": Created automatically after each actual cycle"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Pattern-based"}),": Uses ",(0,c.jsx)(n.code,{children:"repeat_period"})," from Client model for timing"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Smart cleanup"}),": Old expected cycles are deleted when new actual cycle is logged"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"User interaction"}),': Shows "Your cycle may start today" with option to convert to actual']}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"No ovulation initially"}),": Only gets ovulation dates if converted to actual cycle"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Notification system"}),": Used for PMS and period start reminders"]}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Auto-generation logic:"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"// After logging actual cycle, system creates next expected cycle\n$start = Carbon::parse($actual_cycle->start)->addDays($repeat_period);\n$expected_cycle = Cycle::create([\n    'start' => $start,                    // Predicted start date\n    'end' => $start + day_numbers - 1,    // Predicted end date\n    'type' => 'expected',                 // Predicted cycle\n    'user_id' => $user->id,\n]);\n"})}),"\n",(0,c.jsxs)(n.h4,{id:"-cycle-lifecycle-management",children:["\ud83d\udd04 ",(0,c.jsx)(n.strong,{children:"Cycle Lifecycle Management"})]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Expected \u2192 Actual"}),": When user confirms expected cycle started"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Cleanup mechanism"}),": Old expected cycles deleted when patterns change"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Pregnancy handling"}),": Both types suspended during pregnancy periods"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Pattern learning"}),": System adapts predictions based on actual cycle history"]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"key-calculations-explained",children:"Key Calculations Explained"}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Ovulation Calculation Logic:"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"$ovulation_date = Carbon::parse($cycle->start)\n    ->addDays($user->client->repeat_period - 14)\n    ->format('Y-m-d');\n"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"repeat_period"})," comes from Client model (default: 28 days = full cycle length)"]}),"\n",(0,c.jsxs)(n.li,{children:["Formula: ",(0,c.jsx)(n.strong,{children:"Period Start + (Cycle Length - 14 days)"})]}),"\n",(0,c.jsx)(n.li,{children:"Example: Start Jan 1 + (28 - 14) = Jan 15 ovulation"}),"\n"]}),"\n",(0,c.jsx)(n.p,{children:(0,c.jsx)(n.strong,{children:"Fertile Window Calculation:"})}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"'start_ovulation_date' => $ovulation_date - 2 days,  // Jan 13\n'end_ovulation_date' => $ovulation_date + 2 days     // Jan 17  \n"})}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"Creates 5-day fertile window centered on ovulation day"}),"\n",(0,c.jsx)(n.li,{children:"Used for pregnancy planning and cycle tracking"}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"cycle-management-system",children:"Cycle Management System"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"(Backend)"})," The Cycle model implements sophisticated cycle management that handles both actual period tracking and predictive cycle generation:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Automatic ovulation calculation"}),": ",(0,c.jsx)(n.code,{children:"ovulation_date = start + (repeat_period - 14)"})]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Fertile window generation"}),": 5-day window centered around ovulation date"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Cycle validation"}),": Ensures minimum 21-day gap between cycles"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Abnormality detection"}),": Flags cycles that exceed normal parameters"]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"cycle-day-generation",children:"Cycle Day Generation"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"(Backend)"})," Automatically creates individual CycleDay records for each day of the cycle:"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-php",children:"// Example: Creating cycle days for a 5-day period\nfor ($i = 1; $i <= $day_numbers + 1; $i++) {\n    CycleDay::create([\n        'cycle_id' => $cycle->id,\n        'day_number' => $i,\n        'date' => $i == 1 ? $cycle->start : Carbon::parse($cycle->start)->addDays($i - 1)\n    ]);\n}\n"})}),"\n",(0,c.jsx)(n.h3,{id:"expected-cycle-prediction",children:"Expected Cycle Prediction"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"(Backend)"})," The system automatically generates future expected cycles based on user patterns:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Auto-generation"}),": Creates next expected cycle when actual cycle is logged"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Pattern-based prediction"}),": Uses ",(0,c.jsx)(n.code,{children:"repeat_period"})," from user's client settings"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Cleanup mechanism"}),": Removes old expected cycles when new actual cycle is created"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Smart notifications"}),": Expected cycles trigger PMS reminders 2-4 days before predicted start"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Conversion capability"}),": Expected cycles can be converted to actual when user confirms period started"]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"data-integrity-and-validation",children:"Data Integrity and Validation"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"(Backend)"})," Comprehensive validation ensures data accuracy:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"21-day minimum gap"}),": Enforced between cycles to prevent unrealistic entries"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Pregnancy conflict prevention"}),": Cycles cannot overlap with pregnancy periods"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Duplicate prevention"}),": Same start date cannot be used for multiple actual cycles"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Date logic validation"}),": End dates must be after start dates with proper constraints"]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"historical-analysis-features",children:"Historical Analysis Features"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"(Backend)"})," Advanced pattern recognition:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Cycle length calculation"}),": Tracks individual cycle lengths for pattern analysis"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Abnormality detection"}),": Flags cycles exceeding normal parameters"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Trend monitoring"}),": Identifies changes in user's cycle patterns over time"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Filter support"}),": Provides date ranges for historical cycle analysis"]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"abnormality-detection",children:"Abnormality Detection"}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.strong,{children:"(Backend)"})," Monitors cycle patterns and flags irregularities:"]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"exceeds_cycle_days"})}),": Period longer than normal (> 7 days)"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"exceeds_cycle_repeats"})}),": Cycle length longer than normal (> 35 days)"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Automatic flagging"}),": System sets these flags during cycle creation/updates"]}),"\n"]}),"\n",(0,c.jsx)(n.h3,{id:"query-scopes",children:"Query Scopes"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:(0,c.jsx)(n.code,{children:"withWhereHas"})}),": Advanced scope for eager loading with constraints"]}),"\n"]}),"\n",(0,c.jsx)(n.h2,{id:"relationships",children:"Relationships"}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"User"})," (belongsTo): ",(0,c.jsx)(n.a,{href:"/tahara-backend-doc/docs/Overviews/User",children:"User model"})," - The user who owns this cycle"]}),"\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.strong,{children:"Cycle Days"})," (hasMany): ",(0,c.jsx)(n.a,{href:"/tahara-backend-doc/docs/Overviews/CycleDay",children:"CycleDay model"})," - Individual days within this cycle for detailed tracking"]}),"\n"]}),"\n",(0,c.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(o,{...e})}):o(e)}}}]);